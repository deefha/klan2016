typedef struct {
} mBlank;

typedef struct {
} mPadding;

typedef struct {
    UINT offset;
    UBYTE height;
    USHORT top;
    UBYTE foo[10];
} mLineMeta <bgcolor=cLtBlue>;

typedef struct {
    UBYTE data[768];
} mPalette <bgcolor=cLtGreen>;

typedef struct {
    UINT topleft_x;
    UINT topleft_y;
    UINT bottomright_x;
    UINT bottomleft_y;
    UINT offset;
} mLinkMeta;

typedef struct {
    USHORT type;
} mLink <bgcolor=cBlue>;

typedef struct {
    USHORT type;
} mLine <bgcolor=cYellow>;

typedef struct {
    local UINT version_length;
    local UINT offset_linemetatable_begin;
    local UINT offset_palettetable_begin;

    version_length = offset_end - offset_begin;

    FSeek(offset_end - 4);
    UINT offset_linktable_begin <bgcolor=cRed>;

    FSeek(offset_end - 8);
    UINT linktable_count <bgcolor=cGreen>;

    if (linktable_count) {
        FSeek(offset_begin + offset_linktable_begin);

        struct mLinkTable {
            FSeek(offset_end - 8 - (linktable_count * 20));

            struct mLinkMetaTable {
                local UINT linkMetaIndex;
                for (linkMetaIndex = 1; linkMetaIndex <= linktable_count; linkMetaIndex++) {
                    mLinkMeta linkMeta;
                }
            } linkMetaTable;

            FSeek(offset_begin + offset_linktable_begin);

            struct mLinks {
                local UINT linkIndex;
                for (linkIndex = 0; linkIndex < linktable_count; linkIndex++) {
                    FSeek(offset_begin + linkMetaTable.linkMeta[linkIndex].offset);
                    mLink link;
                }
            } links;
        } linkTable;
    }
    else {
        mBlank linkTable;
    }

    FSeek(offset_begin + offset_linktable_begin - 52);
    UINT linemetatable_count <bgcolor=cGreen>;
    offset_linemetatable_begin = offset_begin + offset_linktable_begin - 52 - (linemetatable_count * 17) - 17;

    FSeek(offset_linemetatable_begin);

    struct mLineMetaTable {
        local UINT lineMetaIndex;
        for (lineMetaIndex = 1; lineMetaIndex <= linemetatable_count; lineMetaIndex++) {
            mLineMeta lineMeta;
        }
    } lineMetaTable;

    FSeek(offset_linemetatable_begin - 1);
    UBYTE palettetable_count <bgcolor=cGreen>;
    offset_palettetable_begin = offset_linemetatable_begin - 1 - (palettetable_count * 768);

    FSeek(offset_palettetable_begin);

    struct mPaletteTable {
        local UINT paletteIndex;
        for (paletteIndex = 1; paletteIndex <= palettetable_count; paletteIndex++) {
            mPalette palette;
        }
    } paletteTable;

    FSeek(offset_begin);

    struct mLineTable {
        local UINT lineIndex;
        for (lineIndex = 0; lineIndex < linemetatable_count; lineIndex++) {
            FSeek(offset_begin + lineMetaTable.lineMeta[lineIndex].offset);
            mLine line;
        }
    } lineTable;

    FSeek(offset_end);
} mTextVersion <bgcolor=cLtAqua>;



local UINT offset_begin;
local UINT offset_end;

offset_begin = 0;
offset_end = FileSize();

mTextVersion textVersion;
