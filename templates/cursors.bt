#include "common_blank.bt"
#include "common_padding.bt"
#include "common_header.bt"

typedef struct {
    UINT offset_matrices <bgcolor=cRed, fgcolor=cWhite>;
    UINT count_matrices;
    UINT offset_foo_1 <bgcolor=cDkPurple, fgcolor=cLtGray>;
    UINT count_foo_1;
    UINT offset_colortables <bgcolor=cDkPurple, fgcolor=cLtGray>;
    UINT foo_1;
    UINT foo_2 <bgcolor=cDkPurple, fgcolor=cLtGray>;

    for (lOffsetIndex = 0; lOffsetIndex < 99; lOffsetIndex++) {
        UINT offset_foo_2 <format=hex>;
        UINT count_foo_2 <bgcolor=cDkPurple, fgcolor=cLtGray, format=hex>;
    }
} tFAT <bgcolor=cLtPurple>;

typedef struct {
    UBYTE x <bgcolor=cRed, fgcolor=cWhite>;
    UBYTE y;
    USHORT id;
    UBYTE data[1024];
} tMatrix;

typedef struct {
    FSeek(fat.offset_matrices);
    for (lOffsetIndex = 0; lOffsetIndex < fat.count_matrices; lOffsetIndex++) {
        tMatrix matrix;
    }
} tMatrices;

typedef struct {
    FSeek(fat.offset_foo_1);
    UBYTE data[512];
} tFoo1;

typedef struct {
    UBYTE data[31];
} tFoo2data;

typedef struct {
    for (lOffsetIndex = 0; lOffsetIndex < fat.count_foo_1; lOffsetIndex++) {
        FSeek(fat.offset_foo_2[lOffsetIndex]);
        tFoo2data data;
    }
} tFoo2;

typedef struct {
    UBYTE data[768];
} tColortable;

typedef struct {
    FSeek(fat.offset_colortables);
    for (lOffsetIndex = 0; lOffsetIndex < 5; lOffsetIndex++) {
        tColortable colortable;
    }
} tColortables;

local UINT lOffsetIndex;
local UINT lOffset;

tHeader header;
tFAT fat;
tMatrices matrices;
tFoo1 foo_1;
tFoo2 foo_2;
tColortables colortables;
