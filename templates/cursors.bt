#include "common_blank.bt"
#include "common_padding.bt"
#include "common_header.bt"

typedef struct {
    UINT cursors_offset <bgcolor=cRed, fgcolor=cWhite>;
    UINT cursors_count;
    UINT foo_1_offset <bgcolor=cDkPurple, fgcolor=cLtGray>;
    UINT foo_2_count;
    UINT colortables_offset <bgcolor=cDkPurple, fgcolor=cLtGray>;
    UINT foo;
    UINT bar <bgcolor=cDkPurple, fgcolor=cLtGray>;

    for (lOffsetIndex = 0; lOffsetIndex < 99; lOffsetIndex++) {
        UINT foo_2_offset;
        UINT foo_2_foo <bgcolor=cDkPurple, fgcolor=cLtGray>;
    }
} tFAT <bgcolor=cLtPurple>;

typedef struct {
    UBYTE x <bgcolor=cRed, fgcolor=cWhite>;
    UBYTE y;
    USHORT id;
    UBYTE data[1024];
} tCursor;

typedef struct {
    FSeek(fat.cursors_offset);
    for (lOffsetIndex = 0; lOffsetIndex < fat.cursors_count; lOffsetIndex++) {
        tCursor cursor;
    }
} tCursors;

typedef struct {
    FSeek(fat.foo_1_offset);
    UBYTE matrix[512];
} tFoo1;

typedef struct {
    UBYTE data[31];
} tFoo2data;

typedef struct {
    for (lOffsetIndex = 0; lOffsetIndex < fat.foo_2_count; lOffsetIndex++) {
        FSeek(fat.foo_2_offset[lOffsetIndex]);
        tFoo2data data;
    }
} tFoo2;

typedef struct {
    UBYTE data[768];
} tColortable;

typedef struct {
    FSeek(fat.colortables_offset);
    for (lOffsetIndex = 0; lOffsetIndex < 5; lOffsetIndex++) {
        tColortable colortable;
    }
} tColortables;

local UINT lOffsetIndex;
local UINT lOffset;

tHeader header;
tFAT fat;
tCursors cursors;
tFoo1 foo_1;
tFoo2 foo_2;
tColortables colortables;
